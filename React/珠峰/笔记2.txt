1. 关于JSX底层处理机制
    第一步：把我们编写的JSX语法，编译为虚拟DOM对象「virtual DOM」
        虚拟DOM对象：框架自己内部构建的一套对象体系（对象的相关成员都是React内部规定的），基于这些属性描述，我们所构建视图中的DOM节点的相关特征
        @1 基于 babel-preset-react-app 把JSX编译为 React.createElement(...)这种格式
            只要是元素节点，必然会给予createElement进行处理
            React.createElement(ele,props,...children)
                + ele: 元素表签名「或组件」
                + props：元素的属性集合（对象）「如果没有设置过任何的属性，则此值为null」
                + children：第三个及以后的参数，都是当前元素的子节点
        @2 再把createElement方法执行，创建出virtualDOM虚拟DOM对象「也有称之为：JSX元素，JSX对象、ReactChild对象……」
            virtualDom = {
                $$typeof: Symbol(react,element),
                ref: null,
                key: null,
                type: 标签名「或组件」,
                // 存储了元素的相关属性 && 子节点信息
                props: {
                    元素相关属性,
                    children: 子节点信息「没有子节点则没有改属性，属性值可能是一个值，也可能是个数组」
                }
            }


    第二步：把构建的virtual DOM渲染为真实DOM
        真实DOM：浏览器页面中，最后渲染出来，让用户看见的DOM元素

        
    补充说明：第一次渲染页面是直接从virtual DOM -> 真实DIM；但是后期视图更新的时候，需要经过DOM-DIFF对比，计算出补丁包PATCH（两次视图差异的部分），把PATCH补丁包进行渲染